/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/music/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * получить музыку по id
         * @description получить музыку по id
         */
        get: operations["getMusic"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/music": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * получить всю музыку
         * @description получить всю музыку
         */
        get: operations["getAllMusic"];
        put?: never;
        /**
         * зыгрузить музыку
         * @description зыгрузить музыку
         */
        post: operations["uploadMusic"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/playlists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * создать плей лист
         * @description ...
         */
        post: operations["createPlaylist"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/playlists/{playlistId}/tracks/{musicId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * добавить трек в плей лист
         * @description ...
         */
        post: operations["addTrackToPlaylist"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/playlists/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * получить плей лист по id
         * @description получит
         */
        get: operations["getPlaylist"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/signup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** зарегистрироваться */
        post: operations["signup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/signin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** авторизироваться */
        post: operations["signin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh access token */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: {
                    refreshToken?: string;
                };
            };
            requestBody?: never;
            responses: {
                /** @description Access token refreshed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["AuthResponse"];
                    };
                };
                401: components["responses"]["UnauthorizedError"];
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** получить информацию о пользователе */
        get: operations["getUserInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/playlists": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** получить плей листы пользователя */
        get: operations["getUserPlaylists"];
        put?: never;
        /** добавить плей лист для юзера */
        post: operations["addNowCreatedPlaylistToUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        MusicDTO: {
            /** Format: int64 */
            id?: number;
            name?: string;
            artist?: string;
            url?: string;
        };
        MusicUploadDTO: {
            name?: string;
            artist?: string;
        };
        CreatePlaylistRequest: {
            name?: string;
            description?: string;
        };
        Music: {
            /** Format: int64 */
            id?: number;
            name?: string;
            artist?: string;
            url?: string;
        };
        PlayList: {
            /** Format: int64 */
            id?: number;
            name?: string;
            description?: string;
            imageUrl?: string;
            tracks?: components["schemas"]["Music"][];
        };
        SignupRequest: {
            username?: string;
            email?: string;
            password?: string;
        };
        SigninRequest: {
            username?: string;
            password?: string;
        };
        AuthResponse: {
            token: string;
            user: components["schemas"]["User"];
            message: string;
        };
        UserInfoResponse: {
            username?: string;
        };
        User: {
            /** Format: int64 */
            id?: number;
            username?: string;
            password?: string;
            email?: string;
            playlists?: components["schemas"]["PlayList"][];
            roles?: string[];
        };
        Error: {
            message: string;
            code: string;
        };
    };
    responses: {
        /** @description Bad request */
        BadRequestError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "message": "Invalid input data",
                 *       "code": "VALIDATION_ERROR"
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Unauthorized */
        UnauthorizedError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "message": "Authentication required",
                 *       "code": "UNAUTHORIZED"
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Resource not found */
        NotFoundError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "message": "Resource not found",
                 *       "code": "NOT_FOUND"
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Internal server error */
        InternalServerError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "message": "Internal server error",
                 *       "code": "INTERNAL_ERROR"
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description Conflict */
        ConflictError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "message": "Resource already exists",
                 *       "code": "CONFLICT"
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
        /** @description File too large */
        FileTooLargeError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                /** @example {
                 *       "message": "File size exceeds limit",
                 *       "code": "FILE_TOO_LARGE"
                 *     } */
                "application/json": components["schemas"]["Error"];
            };
        };
    };
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getMusic: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MusicDTO"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getAllMusic: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MusicDTO"][];
                };
            };
            401: components["responses"]["UnauthorizedError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    uploadMusic: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    file: string;
                    music: components["schemas"]["MusicUploadDTO"];
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MusicDTO"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            413: components["responses"]["FileTooLargeError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    createPlaylist: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreatePlaylistRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlayList"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    addTrackToPlaylist: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                playlistId: number;
                musicId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlayList"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getPlaylist: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlayList"];
                };
            };
            401: components["responses"]["UnauthorizedError"];
            404: components["responses"]["NotFoundError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    signup: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SignupRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthResponse"];
                };
            };
            400: components["responses"]["BadRequestError"];
            409: components["responses"]["ConflictError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    signin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SigninRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthResponse"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getUserInfo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserInfoResponse"];
                };
            };
            401: components["responses"]["UnauthorizedError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    getUserPlaylists: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlayList"][];
                };
            };
            401: components["responses"]["UnauthorizedError"];
            500: components["responses"]["InternalServerError"];
        };
    };
    addNowCreatedPlaylistToUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PlayList"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            400: components["responses"]["BadRequestError"];
            401: components["responses"]["UnauthorizedError"];
            500: components["responses"]["InternalServerError"];
        };
    };
}
